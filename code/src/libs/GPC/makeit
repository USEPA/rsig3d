#!/bin/csh -f
# Compile GPC library.
# Usage: makeit

set LIBRARY     = "GPC"
set HEADERS     = "gpc.h"
set SOURCE      = "gpc.c"
set OBJECTS     = `echo "$SOURCE" | sed "s/\.c/\.o/g"`
set INCLUDE_DIR = ../../../include
set LIB_DIR     = ../../../lib

# Determine the platform using uname:

set uname_ = "`uname`"
set uname_m = "`uname -m`"
set platform = "$uname_.$uname_m"

echo "platform is $platform"


set LIB_DEBUG     = $LIB_DIR/$platform/lib$LIBRARY.debug.a
set LIB_OPTIMIZED = $LIB_DIR/$platform/lib$LIBRARY.a

set CC = 'cc'
set AR = 'ar -rv'
set RANLIB = 'ar -t'
# Add -O to -g so generated code is tail-recursive.
set DEBUG = "-g -O"
set OPTIMIZED = "-O"
#set IFLAGS = "-I../../../include -I."
set IFLAGS = "-DCUSTOM_EPSILON=1e-6 -I../../../include -I."

if ( "$platform" == "Linux.x86_64" ) then
  set CC = 'gcc -m64 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE'
else if ( "$platform" == "Darwin.x86_64" || "$platform" == "Darwin.arm64" ) then
##set CC  = 'gcc -m64 -fopenmp'
##set CC  = 'gcc -arch ppc -arch ppc64 -arch i686 -arch x86_64 -fopenmp'
##set CC  = 'gcc -arch ppc -arch ppc64 -arch i686 -arch x86_64'
  set CC  = 'gcc -m64'
  set DEBUG = "$DEBUG -Wall"
  set RANLIB = 'ranlib'
endif

touch junk.o a.out core  $LIB_DEBUG $LIB_OPTIMIZED
\rm -f   *.o a.out core* $LIB_DEBUG $LIB_OPTIMIZED
set here = `pwd`
cd $INCLUDE_DIR ; touch $HEADERS ; \rm -f $HEADERS ; cd $here

# Compile debug version of library:

echo "$CC $DEBUG $IFLAGS -c $SOURCE"
$CC $DEBUG $IFLAGS -c $SOURCE
$AR $LIB_DEBUG $OBJECTS
$RANLIB $LIB_DEBUG
\rm -f $OBJECTS

# Compile optimized version of library:

echo "$CC $OPTIMIZED $IFLAGS -c $SOURCE"
$CC $OPTIMIZED $IFLAGS -c $SOURCE
$AR $LIB_OPTIMIZED $OBJECTS
$RANLIB $LIB_OPTIMIZED
\rm -f $OBJECTS

cp -p $HEADERS $INCLUDE_DIR/

echo " "
ls -lF
ls -lF $INCLUDE_DIR $LIB_DEBUG $LIB_OPTIMIZED
file $LIB_DEBUG $LIB_OPTIMIZED
echo " "


